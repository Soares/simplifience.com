// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.τ = 2 * Math.PI;

  this.util = {};

  this.util.Path = (function() {

    function Path(x, y) {
      this.arc = __bind(this.arc, this);

      this.move = __bind(this.move, this);

      this.draw = __bind(this.draw, this);
      this.string = "M " + x + " " + y;
    }

    Path.prototype.draw = function(x, y, absolute) {
      var letter;
      letter = absolute ? 'L' : 'l';
      this.string += "" + letter + " " + x + " " + y;
      return this;
    };

    Path.prototype.move = function(x, y, absolute) {
      var letter;
      letter = absolute ? 'M' : 'm';
      this.string += "" + letter + " " + x + " " + y;
      return this;
    };

    Path.prototype.arc = function(x, y, rx, ry, theta, large, invert, absolute) {
      var letter;
      large = +(large || 0);
      invert = +(invert || 0);
      letter = absolute ? 'A' : 'a';
      this.string += "" + letter + " " + rx + " " + ry + " " + theta + " " + large + " " + invert + " " + x + " " + y;
      return this;
    };

    return Path;

  })();

  this.util.partialCircle = function(cx, cy, r, turns, yaw) {
    var x1, x2, y1, y2;
    yaw = yaw || 0;
    x1 = cx + (r * Math.cos(yaw * τ));
    y1 = cy - (r * Math.sin(yaw * τ));
    x2 = cx + (r * Math.cos((yaw + turns) * τ));
    y2 = cy - (r * Math.sin((yaw + turns) * τ));
    return new util.Path(x1, y1).arc(x2, y2, r, r, 0, turns > 0.5, false, true).string;
  };

  this.util.rotatedLine = function(sx, sy, r, turns) {
    var dx, dy;
    dx = r * Math.cos(turns * τ);
    dy = -r * Math.sin(turns * τ);
    return new util.Path(sx, sy).draw(dx, dy).string;
  };

  this.util.paperFor = function(elem, width, height) {
    var paper, w;
    w = $(elem).width();
    paper = new Raphael(elem, w, w * height / width);
    paper.customAttributes.circ = function(x, y, r, turns, yaw) {
      return {
        path: util.partialCircle(x, y, r, turns, yaw)
      };
    };
    paper.customAttributes.turn = function(x, y, r, turns) {
      return {
        path: util.rotatedLine(x, y, r, turns)
      };
    };
    paper.customAttributes.turns = function(turns) {
      return {
        text: (τ * turns).toFixed(6)
      };
    };
    paper.setViewBox(0, 0, width, height);
    return paper;
  };

}).call(this);
