// Generated by CoffeeScript 1.4.0
(function() {
  var ComplexPlane, LARGE, NumberLine, NumberPlane, OnePlane, PADDING, PolarPlane, SMALL, UNIT,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  LARGE = 500;

  SMALL = 50;

  PADDING = 40;

  UNIT = 35;

  NumberLine = (function(_super) {

    __extends(NumberLine, _super);

    function NumberLine(elem, width, height) {
      var numberOnly, positives, x, y;
      if (width == null) {
        width = LARGE;
      }
      if (height == null) {
        height = SMALL;
      }
      NumberLine.__super__.constructor.call(this, elem, width, height);
      numberOnly = this.elem.data('only-numbers') || false;
      positives = this.elem.data('positives') || false;
      x = positives ? PADDING + UNIT : width / 2;
      y = height / 2;
      this.axis([x, y], {
        unit: UNIT,
        tickType: numberOnly ? false : null,
        drawLine: !numberOnly,
        textOffset: numberOnly ? 2 : null,
        from: positives ? null : -5,
        to: positives ? 10 : 5,
        zero: positives ? 1 : 0
      });
    }

    return NumberLine;

  })(Uriel.Diagram);

  NumberPlane = (function(_super) {

    __extends(NumberPlane, _super);

    function NumberPlane(elem, width, height) {
      var close, expand, imaginary, initial, real, zero, zx, zy, _ref;
      if (width == null) {
        width = LARGE;
      }
      if (height == null) {
        height = LARGE;
      }
      NumberPlane.__super__.constructor.call(this, elem, width, height);
      _ref = [width / 2, height / 2], zx = _ref[0], zy = _ref[1];
      zero = this.text([zx, zy + 12], '0');
      real = this.axis([zx, zy], {
        unit: UNIT,
        from: -5,
        to: 5,
        labels: function(num) {
          if (num === 0) {
            return false;
          } else {
            return num;
          }
        }
      });
      imaginary = this.axis([zx, zy], {
        unit: UNIT,
        from: -5,
        to: 5,
        tickType: 'top',
        adjustTick: function(num) {
          return num !== 0;
        },
        labels: function(num) {
          if (num === 0) {
            return false;
          } else {
            return '?';
          }
        }
      });
      initial = [
        [
          imaginary.elements.geometry, {
            transform: '',
            opacity: 1
          }
        ], [
          imaginary.elements.labels, {
            transform: '',
            opacity: 0
          }
        ], [
          zero, {
            transform: ''
          }
        ]
      ];
      expand = this.animate([
        [
          zero, {
            transform: ['t', -8, 0]
          }
        ], [
          imaginary.elements.geometry, {
            transform: ['r', -90, zx, zy]
          }
        ], [
          imaginary.elements.labels, {
            transform: ['r', -90, zx, zy, 'r', 90, 't', 0],
            opacity: 1
          }
        ]
      ], 1500, '<');
      close = this.animate(initial, 750, '>');
      this.recipe(initial, [1000, expand, 5000, close], 8000).triggerOnView(1000);
    }

    return NumberPlane;

  })(Uriel.Diagram);

  ComplexPlane = (function(_super) {

    __extends(ComplexPlane, _super);

    function ComplexPlane(elem) {
      this.point = __bind(this.point, this);

      this.makeVerticalAxis = __bind(this.makeVerticalAxis, this);

      this.labelZero = __bind(this.labelZero, this);
      ComplexPlane.__super__.constructor.call(this, elem, {
        width: LARGE,
        height: LARGE,
        unit: UNIT
      });
      this.rule([2, 3], [0, 3]);
      this.rule([2, 3], [2, 0]);
      this.text([2.6, 3.2], [
        '2 + 3', {
          text: 'i',
          'font-style': 'italic'
        }
      ]);
      this.point([2, 3], 'red');
    }

    ComplexPlane.prototype.labelZero = function() {
      return this.text([-0.33, -0.4], 0);
    };

    ComplexPlane.prototype.makeVerticalAxis = function() {
      return ComplexPlane.__super__.makeVerticalAxis.call(this, {
        textOffset: 10,
        labels: function(num) {
          if (num === 0) {
            return false;
          } else {
            return [
              num, {
                text: 'i',
                'font-style': 'italic'
              }
            ];
          }
        }
      });
    };

    ComplexPlane.prototype.point = function(pt, color) {
      this.line([0, 0], pt, {
        "class": color
      });
      return this.circle(pt, 4, {
        "class": color
      });
    };

    return ComplexPlane;

  })(Uriel.Plane);

  PolarPlane = (function(_super) {

    __extends(PolarPlane, _super);

    function PolarPlane(elem, width, height) {
      var commentary, fadeIn, fadeOut, fallDown, hold, initial, preFallDown, preScale, preTurn, problem, rdot, recipe, result, rpath, scale, turn, _ref;
      if (width == null) {
        width = LARGE;
      }
      if (height == null) {
        height = LARGE;
      }
      this.point = __bind(this.point, this);

      this.y = __bind(this.y, this);

      this.x = __bind(this.x, this);

      this.guide = __bind(this.guide, this);

      PolarPlane.__super__.constructor.call(this, elem, width, height);
      this.x0 = width / 2;
      this.y0 = height / 2;
      this.unit = UNIT / 2;
      this.guide(2);
      this.guide(4);
      this.guide(6);
      this.guide(8);
      this.guide(10);
      this.real = this.axis([this.x0, this.y0], {
        unit: this.unit,
        from: -10,
        to: 10,
        step: 2,
        labels: function(num) {
          if (num === 0) {
            return false;
          } else {
            return num;
          }
        }
      });
      this.imaginary = this.axis([this.x0, this.y0], {
        unit: this.unit,
        from: -10,
        to: 10,
        step: 2,
        labels: function(num) {
          if (num === 0) {
            return false;
          } else {
            return [
              num, {
                text: 'i',
                'font-style': 'italic'
              }
            ];
          }
        },
        turns: 1 / 4,
        tickType: 'top',
        textOffset: 10
      });
      this.point(3, 0, 'red');
      this.point(0, 2, 'blue');
      _ref = this.point(3, 0, 'violet'), rpath = _ref[0], rdot = _ref[1];
      commentary = this.text([this.x(9), this.y(9)], '');
      result = this.group([rpath, rdot]);
      initial = [
        [
          result, {
            transform: '',
            opacity: 0
          }
        ], [
          commentary, {
            text: ''
          }
        ], [
          rdot, {
            cx: this.x(3),
            cy: this.y(0)
          }
        ], [
          rpath, {
            path: ['M', this.x0, this.y0, 'l', 3 * this.unit, 0]
          }
        ]
      ];
      problem = [
        [
          commentary, {
            text: '3 ↺ zero × 2 ↺ quarter'
          }
        ]
      ];
      fadeIn = this.animate([
        [
          result, {
            opacity: 1
          }
        ]
      ], 300, '<>');
      preScale = [
        [
          commentary, {
            text: '3 × 2'
          }
        ]
      ];
      scale = this.animate([
        [
          rdot, {
            transform: ['t', 3 * this.unit, 0]
          }
        ], [
          rpath, {
            path: ['M', this.x0, this.y0, 'l', 6 * this.unit, 0]
          }
        ]
      ], 1000, '<>');
      preTurn = [
        [
          commentary, {
            text: 'zero turns + a quarter turn'
          }
        ], [
          rdot, {
            transform: '',
            cx: this.x(6)
          }
        ]
      ];
      turn = this.animate([
        [
          result, {
            transform: ['r', -90, this.x0, this.y0]
          }
        ]
      ], 2000, '<>');
      hold = [
        [
          commentary, {
            text: '= 6 ↺ ¼'
          }
        ], [
          result, {
            transform: ''
          }
        ], [
          rdot, {
            cx: this.x(0),
            cy: this.y(6)
          }
        ], [
          rpath, {
            path: ['M', this.x0, this.y0, 'L', this.x(0), this.y(6)]
          }
        ]
      ];
      preFallDown = [
        [
          commentary, {
            text: ''
          }
        ]
      ];
      fallDown = this.animate([
        [
          result, {
            transform: ['t', 0, 6 * this.unit],
            opacity: .8
          }
        ]
      ], 500, 'backOut');
      fadeOut = this.animate([
        [
          result, {
            opacity: 0
          }
        ]
      ], 200);
      recipe = this.recipe(initial, [1000, problem, 3000, fadeIn, 1000, preScale, 500, scale, 1500, preTurn, 500, turn, 500, hold, 5000, preFallDown, fallDown, fadeOut], 1000);
      recipe.triggerOnView();
    }

    PolarPlane.prototype.guide = function(len) {
      return this.circle([this.x0, this.y0], len * this.unit, {
        "class": 'guide'
      });
    };

    PolarPlane.prototype.x = function(x) {
      return this.x0 + x * this.unit;
    };

    PolarPlane.prototype.y = function(y) {
      return this.y0 - y * this.unit;
    };

    PolarPlane.prototype.point = function(x, y, color) {
      var dot, path;
      path = this.path(['M', this.x0, this.y0, 'l', x * this.unit, -y * this.unit], {
        "class": color
      });
      dot = this.circle([this.x0 + x * this.unit, this.y0 - y * this.unit], 4, {
        "class": color
      });
      return [path, dot];
    };

    return PolarPlane;

  })(Uriel.Diagram);

  OnePlane = (function(_super) {

    __extends(OnePlane, _super);

    function OnePlane(elem, width, height) {
      var go, initial, oneTurn, point,
        _this = this;
      if (width == null) {
        width = LARGE;
      }
      if (height == null) {
        height = LARGE;
      }
      this.y = __bind(this.y, this);

      this.x = __bind(this.x, this);

      this.guide = __bind(this.guide, this);

      this.magnitude = __bind(this.magnitude, this);

      OnePlane.__super__.constructor.call(this, elem, width, height);
      this.x0 = width / 2;
      this.y0 = height / 2;
      this.unit = UNIT * 1.5;
      this.guide(2);
      this.guide(3);
      this.real = this.axis([this.x0, this.y0], {
        unit: this.unit,
        from: -3,
        to: 3,
        labels: function(num) {
          if (num > 1) {
            return num;
          } else {
            return false;
          }
        },
        adjustTick: function(num) {
          if (num > 1) {
            return true;
          } else {
            return false;
          }
        }
      });
      this.imaginary = this.axis([this.x0, this.y0], {
        unit: this.unit,
        from: -3,
        to: 3,
        turns: 1 / 4,
        labels: false,
        tickType: false
      });
      this.magnitude(1);
      this.register({
        oneTurn: function(turns) {
          var x, y;
          if (turns === 1) {
            return {
              oneTurn: 0
            };
          }
          x = _this.x(1.5 * Math.cos(τ * turns));
          y = _this.y(1.5 * Math.sin(τ * turns));
          return {
            x: x,
            y: y,
            text: "1↺" + (turns.toFixed(2))
          };
        }
      });
      oneTurn = this.text([this.x(1.3), this.y(0)], '1↺0');
      point = this.circle([this.x(1), this.y(0)], 2, {
        "class": 'colored'
      });
      initial = [
        [
          oneTurn, {
            oneTurn: 0
          }
        ]
      ];
      go = this.animate([
        [
          oneTurn, {
            oneTurn: 1
          }
        ], [
          point, {
            transform: ['R', -360, this.x0, this.y0]
          }
        ]
      ], 10000, 'linear', Infinity);
      this.recipe(initial, [go]).trigger();
    }

    OnePlane.prototype.magnitude = function(len) {
      return this.circle([this.x0, this.y0], len * this.unit, {
        "class": 'colored line'
      });
    };

    OnePlane.prototype.guide = function(len) {
      return this.circle([this.x0, this.y0], len * this.unit, {
        "class": 'guide'
      });
    };

    OnePlane.prototype.x = function(x) {
      return this.x0 + x * this.unit;
    };

    OnePlane.prototype.y = function(y) {
      return this.y0 - y * this.unit;
    };

    return OnePlane;

  })(Uriel.Diagram);

  $(function() {
    Uriel.diagram('number-line', NumberLine);
    Uriel.diagram('number-plane', NumberPlane);
    Uriel.diagram('complex-plane', ComplexPlane);
    Uriel.diagram('polar-plane', PolarPlane);
    return Uriel.diagram('one-plane', OnePlane);
  });

}).call(this);
