// Generated by CoffeeScript 1.4.0
(function() {
  var ComplexPlane, NumberLine, NumberPlane, OnePlane, PolarPlane, height, padding, unit, width,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  width = 500;

  height = 50;

  padding = 40;

  unit = 35;

  NumberLine = (function(_super) {

    __extends(NumberLine, _super);

    function NumberLine() {
      this.start = __bind(this.start, this);
      return NumberLine.__super__.constructor.apply(this, arguments);
    }

    NumberLine.prototype.start = function() {
      var numberOnly, positives, x, y;
      numberOnly = this.elem.data('only-numbers') || false;
      positives = this.elem.data('positives') || false;
      x = positives ? padding + unit : width / 2;
      y = height / 2;
      return this.axis(x, y, {
        unit: unit,
        tickType: numberOnly ? ' ' : 'T',
        textOffset: numberOnly ? 1 : null,
        from: positives ? null : -5,
        to: positives ? 10 : 5,
        zero: positives ? 1 : 0,
        zeroTick: !positives
      });
    };

    return NumberLine;

  })(Diagram);

  NumberPlane = (function(_super) {

    __extends(NumberPlane, _super);

    function NumberPlane() {
      this.restart = __bind(this.restart, this);

      this.fadeOut = __bind(this.fadeOut, this);

      this.expand = __bind(this.expand, this);

      this.start = __bind(this.start, this);
      return NumberPlane.__super__.constructor.apply(this, arguments);
    }

    NumberPlane.prototype.start = function() {
      var _ref;
      this.zero = this.paper.text(width / 2, width / 2 + 12, '0');
      this.axis(width / 2, width / 2, {
        unit: unit,
        from: -5,
        to: 5,
        zeroLabel: false
      });
      _ref = this.axis(width / 2, width / 2, {
        unit: unit,
        from: -5,
        to: 5,
        tickType: 'L',
        labels: function() {
          return '?';
        },
        zeroTick: 0,
        zeroLabel: false
      }), this.geometry = _ref[0], this.labels = _ref[1];
      this.labels.attr({
        opacity: 0
      });
      return this.elem.waypoint(callbackAfter(this.expand, 1000), {
        offset: 'bottom-in-view',
        triggerOnce: true
      });
    };

    NumberPlane.prototype.expand = function() {
      var a;
      a = this.geometry.animate({
        transform: ['r', -90, width / 2, width / 2]
      }, 1500, '<', callbackAfter(this.fadeOut, 5000));
      this.labels.animateWith(this.geometry, a, {
        transform: ['r', -90, width / 2, width / 2, 'r', 90, 't', -21, 0],
        opacity: 1
      }, 1500, '<');
      return this.zero.animateWith(this.geometry, a, {
        transform: ['t', -8, 0]
      }, 1500, '<');
    };

    NumberPlane.prototype.fadeOut = function() {
      var a;
      a = this.geometry.animate({
        opacity: 0
      }, 1000, '<>', callbackAfter(this.restart, 2000));
      this.labels.animateWith(this.geometry, a, {
        opacity: 0
      }, 1000, '<>');
      return this.zero.animateWith(this.geometry, a, {
        transform: 0
      }, 1000, '<>');
    };

    NumberPlane.prototype.restart = function() {
      this.geometry.attr({
        transform: '',
        opacity: 1
      });
      this.labels.attr({
        opacity: 0,
        transform: ''
      });
      this.zero.attr({
        transform: ''
      });
      return this.expand();
    };

    return NumberPlane;

  })(Diagram);

  ComplexPlane = (function(_super) {

    __extends(ComplexPlane, _super);

    function ComplexPlane() {
      this.point = __bind(this.point, this);

      this.rule = __bind(this.rule, this);

      this.y = __bind(this.y, this);

      this.x = __bind(this.x, this);

      this.start = __bind(this.start, this);
      return ComplexPlane.__super__.constructor.apply(this, arguments);
    }

    ComplexPlane.prototype.start = function() {
      this.x0 = width / 2;
      this.y0 = width / 2;
      this.unit = unit;
      this.zero = this.paper.text(width / 2 - 8, width / 2 + 12, '0');
      this.real = this.axis(width / 2, width / 2, {
        unit: this.unit,
        from: -5,
        to: 5,
        zeroLabel: false
      });
      this.complex = this.axis(width / 2, width / 2, {
        unit: this.unit,
        from: -5,
        to: 5,
        zeroLabel: false,
        turns: 1 / 4,
        labels: function(num) {
          return [
            num, {
              text: 'i',
              'font-style': 'italic'
            }
          ];
        },
        tickType: 'L',
        swapLabels: true,
        textOffset: 10
      });
      this.rule(0, 3, 2, 3);
      this.rule(2, 0, 2, 3);
      this.point(2, 3, 'red');
      return this.text(this.x(3) - 8, this.y(3) + 3, [
        '2 + 3', {
          text: 'i',
          'font-style': 'italic'
        }
      ]);
    };

    ComplexPlane.prototype.x = function(x) {
      return this.x0 + x * this.unit;
    };

    ComplexPlane.prototype.y = function(y) {
      return this.y0 - y * this.unit;
    };

    ComplexPlane.prototype.faded = '#cccccc';

    ComplexPlane.prototype.rule = function(x1, y1, x2, y2) {
      var path;
      x1 = this.x0 + x1 * this.unit;
      y1 = this.y0 - y1 * this.unit;
      x2 = this.x0 + x2 * this.unit;
      y2 = this.y0 - y2 * this.unit;
      path = this.paper.path(['M', x1, y1, 'L', x2, y2]).attr('stroke', this.faded);
      return $(path.node).attr({
        'stroke-dasharray': '5,5'
      });
    };

    ComplexPlane.prototype.point = function(x, y, color) {
      var dot, path;
      path = this.paper.path(['M', this.x0, this.y0, 'l', x * this.unit, -y * this.unit]);
      $(path.node).attr({
        "class": color
      });
      dot = this.paper.circle(this.x0 + x * this.unit, this.y0 - y * this.unit, 4);
      $(dot.node).attr({
        "class": color
      });
      return [path, dot];
    };

    return ComplexPlane;

  })(Diagram);

  PolarPlane = (function(_super) {

    __extends(PolarPlane, _super);

    function PolarPlane() {
      this.pause = __bind(this.pause, this);

      this.turn = __bind(this.turn, this);

      this.scale = __bind(this.scale, this);

      this.fadeIn = __bind(this.fadeIn, this);

      this.reset = __bind(this.reset, this);

      this.guide = __bind(this.guide, this);

      this.start = __bind(this.start, this);
      return PolarPlane.__super__.constructor.apply(this, arguments);
    }

    PolarPlane.prototype.start = function() {
      var _ref;
      this.x0 = width / 2;
      this.y0 = width / 2;
      this.unit = unit / 2;
      this.guide(2);
      this.guide(4);
      this.guide(6);
      this.guide(8);
      this.guide(10);
      this.real = this.axis(width / 2, width / 2, {
        unit: this.unit,
        from: -10,
        to: 10,
        step: 2,
        doTick: (function(num) {
          return num >= 0;
        }),
        zeroLabel: false
      });
      this.complex = this.axis(width / 2, width / 2, {
        unit: this.unit,
        from: -10,
        to: 10,
        step: 2,
        turns: 1 / 4,
        labels: false,
        tickType: false
      });
      this.point(3, 0, 'red');
      this.point(0, 2, 'blue');
      _ref = this.point(3, 0, 'violet'), this.rpath = _ref[0], this.rdot = _ref[1];
      this.result = this.paper.set(this.rpath, this.rdot);
      this.result.attr({
        opacity: 0
      });
      this.commentary = this.text(this.x(9), this.y(9), '3 ↺ zero × 2 ↺ quarter');
      return this.elem.waypoint(callbackAfter(this.fadeIn, 1000), {
        offset: 'bottom-in-view',
        triggerOnce: true
      });
    };

    PolarPlane.prototype.guide = function(len) {
      var guide;
      guide = this.paper.circle(this.x0, this.y0, len * this.unit).attr({
        stroke: this.faded,
        'stroke-width': 1
      });
      return $(guide.node).attr('stroke-dasharray', '5,5');
    };

    PolarPlane.prototype.reset = function() {
      this.commentary.attr({
        text: '3 ↺ zero × 2 ↺ quarter'
      });
      this.result.attr({
        transform: '',
        opacity: 0
      });
      this.rdot.attr({
        cx: this.x(3)
      });
      this.rpath.attr({
        path: ['M', this.x0, this.x0, 'l', 3 * this.unit, 0]
      });
      return setTimeout(this.fadeIn, 4000);
    };

    PolarPlane.prototype.fadeIn = function() {
      this.commentary.attr({
        text: '3 × 2'
      });
      return this.result.animate({
        opacity: 1
      }, 1000, '<>', this.scale);
    };

    PolarPlane.prototype.scale = function() {
      var a;
      a = this.rdot.animate({
        transform: ['t', 3 * this.unit, 0]
      }, 1000, '<>', callbackAfter(this.turn, 2000));
      return this.rpath.animateWith(this.rdot, a, {
        path: ['M', this.x0, this.y0, 'l', 6 * this.unit, 0]
      }, 1000, '<>');
    };

    PolarPlane.prototype.turn = function() {
      this.commentary.attr({
        text: 'zero turns + a quarter turn'
      });
      this.rdot.attr({
        transform: '',
        cx: this.x(6)
      });
      return this.result.animate({
        transform: ['r', -90, this.x0, this.y0]
      }, 2000, '<>', this.pause);
    };

    PolarPlane.prototype.pause = function() {
      var _this = this;
      setTimeout((function() {
        return _this.commentary.attr({
          text: '= 6 ↺ ¼'
        });
      }), 1000);
      return setTimeout(this.reset, 5000);
    };

    return PolarPlane;

  })(ComplexPlane);

  OnePlane = (function(_super) {

    __extends(OnePlane, _super);

    function OnePlane() {
      this.magnitude = __bind(this.magnitude, this);

      this.start = __bind(this.start, this);
      return OnePlane.__super__.constructor.apply(this, arguments);
    }

    OnePlane.prototype.start = function() {
      var oanim, oneTurn, panim, point,
        _this = this;
      this.x0 = width / 2;
      this.y0 = width / 2;
      this.unit = unit * 1.5;
      this.guide(2);
      this.guide(3);
      this.real = this.axis(width / 2, width / 2, {
        unit: this.unit,
        from: -3,
        to: 3,
        doTick: (function(num) {
          return num >= 0;
        }),
        labels: false
      });
      this.complex = this.axis(width / 2, width / 2, {
        unit: this.unit,
        from: -3,
        to: 3,
        turns: 1 / 4,
        labels: false,
        tickType: false
      });
      this.magnitude(1);
      oneTurn = this.text(this.x(1.5), this.y(0), '1↺0');
      this.paper.ca.oneTurn = function(turns) {
        var x, y;
        if (turns === 1) {
          return {
            oneTurn: 0
          };
        }
        x = _this.x(1.5 * Math.cos(τ * turns));
        y = _this.y(1.5 * Math.sin(τ * turns));
        return {
          x: x,
          y: y,
          text: "1↺" + (turns.toFixed(2))
        };
      };
      oneTurn.attr({
        oneTurn: 0
      });
      oanim = Raphael.animation({
        oneTurn: 1
      }, 10000).repeat(Infinity);
      oneTurn.animate(oanim);
      point = this.circle({
        "class": 'colored'
      });
      point.attr({
        cx: this.x(1),
        cy: this.y(0),
        r: 2
      });
      panim = Raphael.animation({
        transform: ['R', -360, this.x0, this.y0]
      }, 10000).repeat(Infinity);
      return point.animateWith(oneTurn, oanim, panim);
    };

    OnePlane.prototype.magnitude = function(len) {
      var guide;
      guide = this.paper.circle(this.x0, this.y0, len * this.unit).attr({
        stroke: this.faded,
        'stroke-width': 1
      });
      return $(guide.node).attr({
        "class": 'colored',
        style: 'fill: none'
      });
    };

    return OnePlane;

  })(PolarPlane);

  $(function() {
    diagram('number-line', NumberLine, width, height);
    diagram('number-plane', NumberPlane, width, width);
    diagram('complex-plane', ComplexPlane, width, width);
    diagram('polar-plane', PolarPlane, width, width);
    return diagram('one-plane', OnePlane, width, width);
  });

}).call(this);
