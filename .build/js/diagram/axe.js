// Generated by CoffeeScript 1.7.1
(function() {
  var AxeRadar, HEIGHT, UNIT, WIDTH,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  WIDTH = 500;

  HEIGHT = 500;

  UNIT = 50;

  AxeRadar = (function(_super) {
    __extends(AxeRadar, _super);

    function AxeRadar(elem) {
      this.line = __bind(this.line, this);
      this.guide = __bind(this.guide, this);
      this.dot = __bind(this.dot, this);
      var cx, cy, dx, dy, spread, turns, u, v, x, y, _ref, _ref1;
      AxeRadar.__super__.constructor.call(this, elem, WIDTH, HEIGHT);
      this.guide(UNIT);
      this.guide(UNIT * 2);
      this.guide(UNIT * 3);
      this.guide(UNIT * 4);
      this.line(0);
      this.line(1 / 16);
      this.line(2 / 16);
      this.line(3 / 16);
      this.line(4 / 16);
      this.line(5 / 16);
      this.line(6 / 16);
      this.line(7 / 16);
      _ref = this.elem.data('axe') || [1.9, 1], x = _ref[0], y = _ref[1];
      turns = this.elem.data('angle') || 1 / 6;
      if (!this.elem.data('off')) {
        this.dot('The Axe', x, y, 12, 'blue');
      }
      u = Math.cos(τ * turns);
      v = Math.sin(τ * turns);
      spread = (this.elem.data('spread') || 1) * (36 / 50);
      dx = u * spread;
      dy = v * -spread;
      _ref1 = this.elem.data('center') || [x, y], cx = _ref1[0], cy = _ref1[1];
      this.dot('The Blade', cx + dx, cy - dy, 8, 'red');
      this.dot('The Handle', cx - dx, cy + dy, 8, 'red');
    }

    AxeRadar.prototype.dot = function(label, x, y, radius, color) {
      var inner, outer, text;
      x = x * UNIT + (WIDTH / 2);
      y = -y * UNIT + (HEIGHT / 2);
      inner = this.paper.circle(x, y, radius - 2);
      outer = this.paper.circle(x, y, radius);
      inner.node.setAttribute('class', color);
      outer.node.setAttribute('class', color + ' line');
      text = this.paper.text(x + 42, y, label);
      return text.node.setAttribute('class', color);
    };

    AxeRadar.prototype.guide = function(radius) {
      var guide;
      guide = this.paper.circle(WIDTH / 2, HEIGHT / 2, radius);
      return guide.node.setAttribute('class', 'guide');
    };

    AxeRadar.prototype.line = function(turns) {
      var cx, cy, dx, dy, line, u, v;
      u = Math.cos(turns * τ);
      v = Math.sin(turns * τ);
      cx = WIDTH / 2;
      cy = HEIGHT / 2;
      dx = 200;
      dy = 200;
      line = this.paper.path(['M', cx + u * dx, cy - v * dy, 'L', cx - u * dx, cy + v * dy]);
      return line.node.setAttribute('class', 'guide');
    };

    return AxeRadar;

  })(Uriel.Diagram);

  $(function() {
    return Uriel.diagram('axe', AxeRadar);
  });

}).call(this);
