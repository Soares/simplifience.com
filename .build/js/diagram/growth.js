// Generated by CoffeeScript 1.4.0
(function() {
  var Growth, height, heightUnit, padding, rectWidth, unit, width, zx, zy,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  width = 500;

  height = 300;

  padding = 50;

  zx = padding;

  zy = height - padding;

  unit = width - 2 * padding;

  rectWidth = 30;

  heightUnit = 60;

  Growth = (function(_super) {

    __extends(Growth, _super);

    function Growth() {
      this.continuous = __bind(this.continuous, this);

      this.n2 = __bind(this.n2, this);

      this.n1 = __bind(this.n1, this);

      this.reset = __bind(this.reset, this);

      this.start = __bind(this.start, this);
      return Growth.__super__.constructor.apply(this, arguments);
    }

    Growth.prototype.start = function() {
      this.principle = this.paper.rect(zx, zy - heightUnit, rectWidth, heightUnit);
      $(this.principle.node).attr('class', 'green');
      this.axis(zx, zy, {
        unit: unit,
        to: new Bound(1, false)
      });
      return this.elem.waypoint(this.reset, {
        offset: 'bottom-in-view',
        triggerOnce: true
      });
    };

    Growth.prototype.reset = function() {
      this.principle.attr({
        transform: '',
        x: zx,
        y: zy - heightUnit,
        height: heightUnit
      });
      return setTimeout(this.n1, 2000);
    };

    Growth.prototype.n1 = function() {
      var ding,
        _this = this;
      this.principle.attr({
        transform: ''
      });
      ding = function() {
        var interest1;
        console.log('dinging');
        interest1 = _this.paper.rect(zx + unit - rectWidth, zy - heightUnit, rectWidth, heightUnit);
        $(interest1.node).attr('class', 'teal');
        interest1.toBack();
        return interest1.animate({
          transform: ['t', 0, -heightUnit]
        }, 500, 'backOut', callbackAfter(_this.n2, 2000));
      };
      return this.principle.animate({
        transform: ['t', unit - rectWidth, 0]
      }, 3000, 'linear', ding);
    };

    Growth.prototype.n2 = function() {
      return this.continuous();
    };

    Growth.prototype.continuous = function() {
      this.principle.attr({
        transform: ''
      });
      return this.principle.animate({
        x: zx + unit - rectWidth,
        y: zy - (Math.E * heightUnit),
        height: Math.E * heightUnit
      }, 3000, callbackAfter(this.reset, 2000));
    };

    return Growth;

  })(Diagram);

  $(function() {
    return diagram('growth', Growth, width, height);
  });

}).call(this);
